깊이 : 루트 노드에서의 길이
높이 : 루트 노드에서 가장 깊은 노드까지의 길이

우선순위 큐 : 가장 우선순위가 높은 데이터가 먼저 추출되는 자료구조

힙을 이용해 구현(삽입 삭제를 모두 로그시간으로 구현가능)

(이진 트리)
최대 2개의 자식을 가지는 트리

포화 이진 트리 : 리프노드를 제외한 모든 노드가 두 자식을 가짐
완전 이진 트리 : 모든 노드가 왼쪽 자식부터 채워진 트리

힙은 원소들 중에서 최대값 혹은 최소값을 빠르게 찾는 자료구조

최대 힙 : 값이 큰 원소부터 추출
- 부모 노드가 항상 값이 큰 완전 이진 트리 => 루트노드부터 꺼냄(가장 우선순위가 큼)

최소 힙 : 값이 작은 원소부터 추출
- 부모 노드가 항상 값이 작은 완전 이진 트리

* 삽입 삭제에서 로그시간이 걸림 


(최소 힙 구현)

상향식으로 부모로 거슬러 올라가면 부모보다 자신이 더 작은 경우 위치를 교체

새로운 원소가 삽입되면 리프노드에 들어간 후 부모 노드와 비교하여 자신이 더작은면 위로 올라감

- 한 줄을 올라갈때마다 원소가 절반씩 줄기때문에 시간 복잡도가 로그시간인것

실제로 힙은 라이브러리를 사용하여 구현

npm install priorityqueuejs

최대 힙 예시
var PriorityQueue = require('priorityqueuejs');

var queue = new PriorityQueue(function(a, b) { 
  return a.cash - b.cash; // cash가 큰 게 우선순위
});

queue.enq({ cash: 250, name: 'Valentina' });
queue.enq({ cash: 300, name: 'Jano' });
queue.enq({ cash: 150, name: 'Fran' });
queue.size(); // 3
queue.peek(); // { cash: 300, name: 'Jano' }
queue.deq(); // { cash: 300, name: 'Jano' }
queue.size(); // 2
