map은 일종의 객체로 각 데이터를 키와 함께 쌍으로 보관하기위한 자료구조
주로 인덱스를 키값으로 사용하기위해 쓰임

- 요소를 추가한 순서대로 순회함, 동적으로 크기가 조절, 검색 시간이 빠르고 일정함

set(key, value) 함수로 값을 객체에 추가 (매핑) , get(키)로  값을 반환
has(key)로 존재 확인, delete(key)로 삭제
keys()로 순회가능한 객체 반환
values()로 순회가능한 값 반환
entries()로 키-값 쌍 반환

* 일반 객체와 달리 키 유형에 제한이 없음 , 추가한 순서를 보장해줌 , 검색이 빠름, 메모리 관리가 좋음 따라서 많은 데이터를 처리하거나 효율적인 검색이 필요한 상황에서 유용

배열 중복 제거 :   [...new Set(배열)]

수정할때 좀 번거로움
let temp = myMap.get(x)
myMap.set(x, temp + 1)


map을 배열에서 of 로 찍으면 배열형태로 [키,값] 이렇게 나

new Map(arr) 하면 배열을 바로 맵으로 바꾸기 가

** map으로 값과 인덱스를 한 반복문으로 다룰 수 있음

(최대 최소 구하는법)
let max = [...myMap.entries()].reduce((a,b) => a[1] > b[1] ? a : b)[1];
let t = [...myMap.entries()].reduce((a,b) => a[1] > b[1] ? a : b)[0]



'use strict';

let fs = require('fs');
let input = fs.readFileSync('input.txt').toString().trim().split('\n');
// /dev/stdin


let n = Number(input[0]);
let numbers = input[1].split(' ').map(Number);
let answer = '';

let arr = [...new Set(numbers)].sort((a,b)=> a-b)

let myMap = new Map();

for(let i = 0 ; i < arr.length ; i++){
    myMap.set(arr[i],i);
}

for(let x of numbers){
    answer += myMap.get(x) + ' ';
}

console.log(answer)
