메모리를 더 사용하여 시간 복잡도를 개선할때 많이 사용 됨

부분 문제의 반복이 발생 할 때 이 점화식을 찾아 메모리에 저장하여 해결
점화식, 수열의 규칙성 찾기 문제에 많이 사용

ex) 피보나치 수열

상향식 : 반복문을 이용해 초기 항부터 계산(작은 문제 -> 큰 문제)
하향식 : 재귀 함수로 큰 항을 구하기 위해 작은 항을 호출(큰 문제 -> 작은 문제로)


(각 단계에 여러 경우가 있으면 이차원으로 해석 하기 )
 dp[i][j]

let n = Number(input[0]);
let dp = [];

for (let i = 1; i <= n; i++) {
    let data = input[i].split(' ').map(Number);
    dp.push(data);
}

for (let i = 1; i < n; i++){
    for(let j = 0 ; j <= i ; j++){
        let upLeft = 0;
        if(j !== 0){
            upLeft = dp[i-1][j-1];
        }
        let up = 0;
        if(j !== i){
            up = dp[i-1][j];
        }
        dp[i][j] = dp[i][j] +Math.max(up,upLeft);
    }
}
console.log(Math.max(...dp[n-1]))//각 층의 값 중 최대값


'use strict';

let fs = require('fs');
let input = fs.readFileSync('input.txt').toString().trim().split('\n');
// /dev/stdin

let [n, m, h] = input[0].split(' ').map(Number);
let a = [];
let d = new Array(h + 1).fill(0);
for (let i = 1; i <= n; i++) {
    a.push(input[i].split(' ').map(Number));
}
d[0] = 1;

for (let i = 0; i < n; i++) { // 각각의 학생이
    let data = [];
    for (let j = 0; j <= h; j++) { // 각각의 높이를 만드는 경우 처리
        for (let k = 0; k < a.length; k++) {
            if (d[j] !== 0 && j + a[i][k] <= h) {
                data.push([j + a[i][k], d[j]]);
            }
        }
    }
    for (let [height, value] of data) {
        d[height] = (d[height] + value) % 10007;
    }
}
    console.log(d[h])

LIS (가장 긴 증가하는 부분 수열)

d[i] = arr[i]를 마지막 원소로 가지는 부분 수열의 최대길이
이때 점화식은
0 <= j < i 에 대하여( 이중 반복문)
d[i] = max(d[i],d[j]+1) if (arr[j] < arr[i]) <- 이건 증가하는 조건을 만족했다는 의미기 때문에 이때 최대값을 갱신 앞에 길이에 누적으로 더해가는 개념이라 dp임

let n = Number(input[0]);
let solider = input[1].split(' ').map(Number);
let dp = new Array(n).fill(1);

for(let i = 0 ; i < n ; i++){
    for(let j = 0 ; j <= i ; j++){
        if(solider[j] >solider[i]){
            dp[i] = Math.max(dp[i],dp[j]+1)
        }
    }
}
console.log(n- Math.max(...dp));

(1만들기)
let n = Number(input[0]);
let dp = new Array(1e6 + 1).fill(0);
dp[0] = 0;
dp[1] = 0;


for (let i = 2; i <= n; i++) {
    if (i % 6 === 0) {
        dp[i] = Math.min(dp[i / 2] + 1, dp[i / 3] + 1, dp[i - 1] + 1)
    } else if (i % 3 === 0) {
        dp[i] = Math.min(dp[i / 3] + 1, dp[i - 1] + 1);
    } else if (i % 2 === 0) {
        dp[i] = Math.min(dp[i / 2] + 1, dp[i - 1] + 1)
    } else {
        dp[i] = dp[i-1] +1 
    }
}
console.log(dp[n])
