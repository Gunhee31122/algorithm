// 누적합 아이디어
let sum = 0;
let current = 0;

while ( sum <= s){
    current += 1;
    sum += current;
} 

console.log(current - 1)






(구간합)
나열된 수 중 특정 구간의 모든 수를 합한 값을 계산
- 반복문을 여러번 사용하지 않고 일정 구간의 합을 계산가능


접두사 합 : 배열의 맨 앞부터 특정 위치까지의 합을 미리 구해 놓는 것

그리고 구간합을 구할 때는 P[right] - P[left-1] 이런식으로 구함 이러면 상수시간으로 처리 가능


나누어 떨어진다 = 배수이다 로 처리가능 /

a-b 가 c로 나누어떨어진다면 a를c로 나눈값과 b를 c로 나눈값이 같은 것으로 처리 가능
따라서 배열에 누적합을 c로 나눈 값들을 저장해둠 그리고 이 값중 같은 것들의 개수를 세어줌 1 ~개 2 ~개 3 ~개 이렇게
그리고 각 케이스에서 2개를 고르는 조합의 수를 더해줌

(2차원 누적합)

sum[x][y] = arr[x][y] + sum[x-1][y] + sum[x][y-1] - sum[x-1][y-1] 시작지점부터 x,y 까지

sum[x][y] = sum[x][y] - sum[i-1][y] - sum[x][j-1] + sum[i-1][j-1]  i,j부터 x,y까지의 합

for(let i = 0 ; i <=n ; i++){
    sum.push(new Array(m+1).fill(0));
}
for(let i = 1 ; i <= n ; i++){
    for(let j = 1 ; j <= m ; j++){
        sum[i][j] = arr[i][j] + sum[i-1][j] + sum[i][j-1] - sum[i-1][j-1];
    }
}

for(let index = 0 ; index < k ; index++){
    let[i,j,x,y] = queries[index];
    let current = sum[x][y] - sum[i-1][y] - sum[x][j-1] + sum[i-1][j-1];
    console.log(current);
}

0행 0열을 모두 0으로 채워놓으면 가로 세로 첫 줄을 따로 만들필요없이 하나의 점화식으로 sum을 구할수 있음



let [n,m] = input[0].split(' ').map(Number);
let arr = [0, ...input[1].split(' ').map(Number)];

let sum = [0];
for(let i = 1; i <= n ; i++){
    sum[i] = sum[i-1] + arr[i];
}

let processed = [];
let counter = {};
for(let i = 0 ; i <= n ; i++){
    processed[i] = sum[i] % m ;
    if(processed[i] in counter) counter[processed[i]] += 1;
    else counter[processed[i]] = 1;
}
let result = 0;
for(let i = 0 ; i < m ; i++){
    if(i in counter) result += parseInt(counter[i] * (counter[i]-1)/ 2);
}
console.log(result);
