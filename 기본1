1. '\n' 줄바꿈
let a = 'sdf\n123' 이렇게 되어있으면 출력할 때 sdf 하고 다음 줄에 123 skdha

2. 입력 데이터가 텍스트 파일로 주어지면 파일 시스템 모듈을 사용
let fs = require('fs');
let input = fs.readFileSync('파일명').toString().split('\n');   <- 백준 할 때는 파일명 자리에 /dev/stdin
하면 리스트로 파일은 받아옴 ( 한 줄씩)
문자열로 받기 때문에 정수로 바꾸는 경우 있음
let line = input[0].split(' '); 이것도 필요

여러 줄에 걸쳐서 데이터가 들어올때는 input[0], input[1] 이 각각 데이터
let [a,b] = input[0].split(' ').map(Number);  로 한 번에 입력값 받기

문자들을 input으로 받을때
input[i].trim().split() 으로 띄어쓰기 제거하기

3.fs 모듈을 사용할 수 없을때 한 줄씩 입력받는 readline 모듈을 사용

const rl = require('readline').createInterface({
  input : process.stdin,
 output : process.stdout
});

let input = [];
rl.on('line', function(line) {
  input.push(line);
}).on('close', function() {
  console.log(input);
  process.exit();
});

4. (이스케이프 시퀀스)
예약어나 특수문자는 \와 함께 사용

5. input 데이터를 그대로 가져오면 각 줄이 끝날때 \r이 붙어서 trim()으로 지워야함

6.(배열 초기화)
let arr = new Array(5).fill(0);

7. 수와 문자열 형 변환은
Number()
String()

8. 알파벳의 아스키 코드는
대문자는 65
소문자는 97

문자 -> 아스키 코드 변환
문자열.charCodeAt(인덱스)

반대는
String.fromCharCode(아스키코드)  <- 아스키 코드 ,로 여러개 넣을수 있음 -> 붙어서 나옴

ex) String.fromCharCode(65,66,67);  하면 ABC출력


9. 컨트롤 / 하면 주석 처리


10. (변수이름)

개수 = count
중요 = main
보조 = sub
총합 = total

11. 
(시간 복잡도 계산)
10^^8 이 O(n)을 1초안에 실행하는 기준
빅 O 표기법은 시간 복잡도 중 최고 차수만 보는 

(시간제한 1초 기준)
N 의 범위가 500 : O(N**3)
N 의 범위가 2000 : O(N**2)
N 의 범위가 100,000 : O(NlogN)
N 의 범위가 10,000,000 : O(N)

해시테이블 : 검색의 시간 복잡도가 O(1) - 메모리를 사용하여 시간을 절약하는 방법

이진 탐색 : O(logn)의 시간복잡도 - 정렬이 안 된 배열이 주어지면 정렬을 먼저 해야 함

힙(우선순위 큐) : 길이가 n인 배열을 힙으로 만들 때 O(nlogn) , 삽입 삭제 모두 O(logn)


12. (문제의 조건들 파악)
- 길이가 0이 되거나 값이 음수가 되는 예외들 포함 가능한지 생각


8.reduce() 는 배열의 모든 원소에 대해 특정한 연산을 순차적으로 적용할 때 사용 //
reduce((accumulator, currentValue) => (반환값))
이 반환값을 accumulator 로 들어가고 최종적으로 reduce 밖으로 리턴함

9.(특정 원소 등장 여부) -> 집합 자료형 //

let mySet = new Set();

mySet.add(3); 3을 추가
mySet.delete(5); 5를 제거
mySet.size ; 자료의 크기
mySet.has(3) ; 3을 가지고 있는지
for (let item of mySet) ; 원소를 하나씩 순회




