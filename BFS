BFS는 큐를 사용 , 모든 간선의 길이가 동일할때 최단 거리를 탐색하기 위해 사용
DFS가 메모리/시간 초과를 받는 경우 , 익숙하면 BFS가 더 유리함


1. 시작 노드를 큐에 넣고 방문 처리
2. 큐에서 원소를 꺼내어 방문하지 않은 인접 노드가 있는지 확인 있으면 인접 노드를 큐에 삽입하고 방문처리
3. 2번을 반복


(큐 구현)
class Queue {
  constructor() {
    this.items = {};
    this.headIndex = 0;
    this.tailIndex = 0;
  }
  enqueue(item){
    this.items[this.tailIndex] = item; // tail자리에는 값이 비어있어야함
    this.tailIndex++
  }
  dequeue(){
    const item = this.items[this.headIndex];
    delete this.items[this.headIndex];
    this.headIndex++;
    return item ; 
  }
  peek() { // 다음 으로 꺼내려는 원소 스택의 top
    return this.items[this.headIndex];
  }
  getLength(){
    return this.tailIndex - this.headIndex;
  }
}


(기본 bfs)
function bfs(graph, start, visited){
    queue = new Queue();
    queue.enqueue(start); // 큐에 넣고 방문처리
    visited[start] = true;
    while(queue.getLength() !== 0){
        v = queue.dequeue(); // 방문한 순서대로 큐에서 반환
        console.log(v);
        for(i of graph[v]){ // 반환한 노드에 연결되어 있는 노드를 모두 큐에 넣음
            if(!visited[i]){
                queue.enqueue(i);
                visited[i] = true;
            }
        }
    }
}


이분 그래프 판단 -> 각 노드에 색깔을 칠해서 구분함 각 색깔로 이분 한다는 의미
이때 인접한 노드끼리 색이 모두 다르면 이분 그래프 일것

let dx = [-2,-2,-1,-1,1,1,2,2];
let dy = [-1,1,-2,2,-2,2,-1,1]; 

let testCases = Number(input[0]);
let line  = 1;
while(testCases--){
    let [v,e] = input[line].split(' ').map(Number); 
    let graph = [];
    for(let i = 1 ; i <= v ; i++){
        graph[i] = [];
    }
    for(let i = 1 ; i <= e ; i++){
        let[u,v] = input[line+i].split(' ').map(Number);
        graph[u].push([v]);
        graph[v].push([u]);
    }
    let visited = new Array(v+1).fill(-1);
    for(let i = 1 ; i <= v; i++){
        if(visited[i] === -1) {
            bfs(i,graph,visited);
        }
    }
    line += e + 1;
    if(isBipartite(graph,visited)){
        console.log('YES');
    } else{
        console.log('NO');
    }
}
function bfs(x,graph,visited){ //0이 빨강, 1이 파랑 -1이 미방문
    let queue = new Queue();
    queue.enqueue(x);
    visited[x] = 0; // 처음 노드는 빨강으로 시작
    while(queue.getLength() !== 0){
        x = queue.dequeue();
        for(let y of graph[x]){
            if(visited[y] === -1){
                visited[y] = (visited[x]+1)%2 ; // 빨강 파랑 스위치
                queue.enqueue(y);
            }
        }
    }
}
function isBipartite(graph,visited){
    for(let x = 1 ;  x < visited.length ; x++){
        for(let y of graph[x]){
            if(visited[x] === visited[y]){
                return false;
            }
        }
    }
    return true;
}








