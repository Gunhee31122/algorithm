자바스크립트 내장 정렬도 nlogn으로 효율적

sort() 안의 콜백함수로 정렬의 기준을 설정 가능
반환 값이 음수이면 a가 우선순위가 높아 앞에 위치 반대도 마찬가지
0이면 순서 변경 x (기준 함수를 안 쓰면 문자열 기준 정렬)
* 조건식과 return 사용하기
* 내림차순 a-b , 오름차순 b-a  객체나 배열에서는 뒤에 인덱스나 키붙이기





선택 정렬 : 매 단계에서 가장 작은 원소를 선택해서 앞으로 보내는 정렬
시간복잡도 O(N**2)

function selectionSort(arr){
  for (let i = 0 ; i < arr.length ; i++){
    let minindex = i ;
    for (let j = i+1; j < arr.length; j++){
      if ( arr[minindex] > arr[j]){
        minindex = j;
      }
    }
    [arr[i],arr[minindex]] = [arr[minindex],arr[i]]
  }
  return arr;
}
let a = [1,3,8,4,5,2];
console.log(selectionSort(a));


버블 정렬 : 단순히 인접한 두원소를 확인하여 정렬이 안되어 있으면 위치를 변경 
시간 복잡도는 O(N**2)

function bubbleSort(arr){
  for (let i = arr.length-1; i >0; i--){
    for(let j = 0 ; j < i ; j++){
      if ( arr[j] > arr[j+1]){
        [arr[j],arr[j+1]] = [arr[j+1],arr[j]];
      }
    }
  }
  return arr
}

let a = [3,4,1,2,6,10,5]
console.log(bubbleSort(a))


삽입정렬 : 각 단계에서 현재 원소가 삽입될 위치를 찾고 적절한 위치에 도달할때까지 반복적으로 왼쪽으로 이동(자기보다 앞쪽과 비교)
시간 복잡도는 O(N**2)

function insertionSort(arr){
  for(let i = 1 ; i < arr.length ; i++){
    for (let j = i ; j> 0 ; j--){
      if(arr[j] < arr[j-1]){
        [arr[j],arr[j-1]] = [arr[j-1],arr[j]];
      } else{
        break;
      }
    }
  }
  return arr
}

let a = [3,5,2,4,1]
console.log(insertionSort(a))


병합 정렬 : 전체 배열을 각각하나씩만 남도록 계속 절반씩 분할 이후 옆의 원소끼리 정렬
시간 복잡도는 O(nlogn)


function merge(arr, left , mid , right){
  let sorted = []
  let [i,j,k] = [left,mid+1,left]
  while ( i <= mid && j <= right){
    if (arr[i] <= arr[j]) sorted[k++] = arr[i++];
    else sorted[k++] = arr[j++];
  }
  if ( i > mid){
    for( ; j <= right ; j++) sorted[k++] = arr[j];
  }
  else {
    for(; i <= mid; i++) sorted[k++] = arr[i];
  }
  for(let x = left ; x <=right ; x++){
    arr[x] = sorted[x];
  }
  return arr
}

function mergeSort(arr,left=0,right= arr.length-1){
  if(left < right){
    let mid = parseInt((left+right)/2);
    mergeSort(arr,left,mid);
    mergeSort(arr,mid+1,right);
    merge(arr,left,mid,right);
  }
  return arr
}
let a = [5,3,4,2,1];
console.log(mergeSort(a));

















