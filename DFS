(dfs)
인접 리스트를 이용해 상태를 표현 , 스택이나 재귀함수를 이용
- 인접한 ~으로 이동이 힌트, 경우의 수 모두찾기

각 노드와 인접한 노드들을 배열에 담아 다시 큰 배열에 넣음
[[], [2,3],[1,5],[1,4,5],[3,5],[2,3,4]]  이런식  
앞에 빈 배열은 인덱스 번호랑 노드 번호를 맞춰서 직관적이게 만드는 것

dfs 로 조합구할때
start 파라미터를 추가하고 

for (let i = start; i < chicken.length; i++) {
        selected.push(chicken[i]);
        dfs(i + 1, depth + 1);
        selected.pop();
    } 요렇게

이게 더 시간 효율적


시작 노드를 스택에 삽입 -> 방문 처리 -> 인접한 노드 중 가장 앞에 순서부터 방문하면서 스택에 삽입 -> 인접한 노드가 없는 경우 스택에서 추출하고 다시 앞에 노드를 기준으로 인접한 노드 방문


function dfs(graph, start , visited){
    visited[start] = true;
    console.log(start);
    for(let i of graph[start]){
        if( !visited[i]){
            dfs(graph, i ,visited);
        }
    }
}
let graph = [[],[2,3,4],[1],[1,5,6],[1,7],[3,8],[3],[4],[5]];

visited = Array(9).fill(false);
dfs(graph,1,visited);




let graph = new Array(computerCount + 1).fill(null).map(() => []);
이렇게 이중 배열을 초기화 해야함  fill 안에 []로 하면 다 같은 빈 배열을 참조하여 다같이 변함

let visitedCount = visited.filter((value) => value === true).length;
이걸로 배열에서 true인것들을 세줌

연결 리스트 만들때 서로에게 서로를 추가해줘야함 1 -> 2  , 2 -> 1

for (let i = 0; i < rows; i++) {
    arr.push(new Array(columns).fill(0));
  }



2차원에서 dfs는 좌표단위로 탐색 (0,0)에서 시작해서 (0,1) , (1,0) 을 방문하는 방식

그래프 범위를 벗어나면 종료해야 함

그래프 변수는 방문처리하는 변수로 초기에 1과 0 으로 갈 수 있는 곳 갈 수 없는 곳이 나눠져 있음 즉 방문했을때 1이라면 갈 수 있지만 아직 가지 않은 것으로 방문 처리로 -1로 바꾸는 것

function dfs(graph, n, m, x, y) { // n , m 은 가로 세로
    if (x <= -1 || x >= n || y <= -1 || y >= m) return false;
    if (graph[x][y] === 1) {
        graph[x][y] = -1; // 방문처리
        dfs(graph, n, m, x - 1, y);
        dfs(graph, n, m, x + 1, y);
        dfs(graph, n, m, x, y - 1);
        dfs(graph, n, m, x, y + 1);
        return true; // 인접 노드 탐색이 끝났음을 알림 -> 카운팅
    }
    return false; // 탐색할 수 없음
}

while(testCases--){ // 테스트 케이스 다 할 동안
    let [m, n, k] = input[line].split(' ').map(Number);
    let graph = [];
    for(let i = 0 ; i < n ; i++){ // 이차원 빈 배열 생성
        graph[i] = new Array(m);
    }
    for(let i = 1 ; i <= k ; i++){
        let [y, x] = input[line + i].split(' ').map(Number);
        graph[x][y] = 1;
    }
    let answer = 0;
    for (let i = 0 ; i < n ; i++){ // 모든 곳을 다 탐색해야 함
        for(let j = 0 ; j < m ; j++){
            if(dfs(graph,n,m,i,j)) answer++;
        }
    }
    line += k + 1;
    console.log(answer);
}

dfs 와 백트래킹의 차이는 백트래킹은 dfs과정이후 방문을 취소하는 단계가 있음 이게 백트래킹(되돌아감)

재귀함수에서는 return후에 제일 아래에 있는 함수가 종료되는 것
따라서 그 이전 함수는 아직 남아있게 됨

트리에서 깊이 우선탐색은 방향을 정해서 그 방향으로 쭉 들어가야함
-> 거리 변수를 하나만 만들지 말고 dp처럼 배열로 만들어서 각 노드까지의 거리를 따로 저장

트리에서는 bfs,dfs로 최단 거리 구하기 가능
매 쿼리 마다 노드 a에서 b까지 거리를 구함

사이클이 존재하면 트리가 아니기 때문에 트리의 개수를 셀때는 사이클이 발생하는 경우를 제외하도로고 설계
-> 방문한 곳을 다시 방문하면 (이전 노드인 경우 제외) 사이클 존재

(사이클 찾기)
let line = 0;
let testCase = 1;

while (true) {
    
    let [n, m] = input[line].split(' ').map(Number);
    if (n === 0 && m === 0) break;
    let graph = [];
    for (let i = 1; i <= n; i++) graph[i] = [];
    for (let i = 1; i <= m; i++) {
        let [x, y] = input[line + i].split(' ').map(Number);
        graph[x].push(y);
        graph[y].push(x);
    }
    let visited = new Array(n + 1).fill(false);
    let cnt = 0;
    for (let i = 1; i <= n; i++) {
        if (!visited[i]) {
            if (!isCycle(i, 0, visited, graph)) cnt++;
        }
    }
    function isCycle(x, prev, visited, graph) { // 이거 자체가 dfs 함수
        visited[x] = true;
        for (let y of graph[x]) {
            if (visited[y] && y !== prev) {
                return true;
            } else if (!visited[y] && isCycle(y, x,visited,graph)) { //방문하지 않았으면 다시 dfs
                return true;
            }
        }
        return false;
    }
    if (cnt === 0) console.log(`Case ${testCase}: No trees.`);
    else if (cnt === 1) console.log(`Case ${testCase}: There is one tree.`);
    else console.log(`Case ${testCase}: A forest of ${cnt} trees.`);
    line += m + 1;
    testCase++;
}
