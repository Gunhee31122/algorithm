(dfs)
인접 리스트를 이용해 상태를 표현 , 스택이나 재귀함수를 이용
- 인접한 ~으로 이동이 힌트, 경우의 수 모두찾기

각 노드와 인접한 노드들을 배열에 담아 다시 큰 배열에 넣음
[[], [2,3],[1,5],[1,4,5],[3,5],[2,3,4]]  이런식  
앞에 빈 배열은 인덱스 번호랑 노드 번호를 맞춰서 직관적이게 만드는 것


시작 노드를 스택에 삽입 -> 방문 처리 -> 인접한 노드 중 가장 앞에 순서부터 방문하면서 스택에 삽입 -> 인접한 노드가 없는 경우 스택에서 추출하고 다시 앞에 노드를 기준으로 인접한 노드 방문


function dfs(graph, start , visited){
    visited[start] = true;
    console.log(start);
    for(let i of graph[start]){
        if( !visited[i]){
            dfs(graph, i ,visited);
        }
    }
}
let graph = [[],[2,3,4],[1],[1,5,6],[1,7],[3,8],[3],[4],[5]];

visited = Array(9).fill(false);
dfs(graph,1,visited);




let graph = new Array(computerCount + 1).fill(null).map(() => []);
이렇게 이중 배열을 초기화 해야함  fill 안에 []로 하면 다 같은 빈 배열을 참조하여 다같이 변함

let visitedCount = visited.filter((value) => value === true).length;
이걸로 배열에서 true인것들을 세줌

연결 리스트 만들때 서로에게 서로를 추가해줘야함 1 -> 2  , 2 -> 1

bfs / dfs 구분법
