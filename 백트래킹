(백트래킹)
완전탐색(모든 경우의 수를 고려)할때 첫 번째로 생각해야 하는 개념
트리는 그래프의 일종으로 백트래킹을 사용할때 필요한 자료구조
이진 탐색과 다르게 변수의 크기가 작음

이전의 조건들과 상충되지 않는 경우에 대해서만 재귀 함수를 호출(실제로 모든 경우를 다 구하지는 않음)

백트래킹 : 다시 돌아감 -> 중간에 안 되는 경우가 나오면 아까 조건을 만족하는 부분으로 돌아가 다시 탐색

if 종료 조건을 만족(마지막 노드) -> 처리
아니면 for 자식 노드를 하나씩 확인 -> 조건을 만족하면 방문 처리 + 재귀 호출 + 방문 처리 해제


(이차원 배열에서 두 점이 대각선에 위치하는지 확인 코드)
 Math.abs(a-x) === Math.abs(b-y) <- 기울기 1기준

let queens = []; // 현재 체스판에 놓인 퀸의 위치 정보들 [2,3]이 있으면 이 위치에
// 퀸이 있다는 것  , 이렇게 결과의 누적을 임시 저장할 공간이 필요

function possible(x,y){
    for(let [a,b] of queens){
        if( a == x || b == y) { // 행이나 열이 같으면 놓을 수 없음
            return false;
        }
        if( Math.abs(a-x) === Math.abs(b-y)){ //대각선 계산 코드
            return false ;
        }
    }
    return true;
}

let cnt = 0;
function dfs(row){ // row는 0번부터 행의 개수만큼 들어감(재귀적으로)  - 각 행을 탐색 , 탐색이 끝나는 시점을 if문에 넣음 , row 보다는 depth가 좀더 좋은 표현(탐색을 몇번 할지)
    if(row ===n){ // n번만큼 재귀를 돌렸으면 경우의 수 1개 완성
        cnt += 1;
    } 
    for( let i = 0 ; i < n ; i++){ 여기는 탐색을 어디까지 할지 트리에서 가로 부분분
        if(!possible(row,i)) continue; // 놓을 수 없으면 무시
        queens.push([row,i]);
        dfs(row+1);
        queens.pop(); // 각 행에 각 열에 놓는 경우의 수를 모두 세야 하니까 pop
    }
}
dfs(0);
console.log(cnt);

(순열 경우의 수 구하기) - nPm
let [n,m] = input[0].split(' ').map(Number);
let depth = 0;
let visited = new Array(n+1).fill(false); //중복을 방지할 때 필요
let result = [];
let answer = '';

function dfs(depth){
    if (depth === m){
        for(let x of result){
            answer += x + ' ';
        }
        answer += '\n'
        return 
    }
    for(let i = 1 ; i <= n ; i++){
        if(visited[i]) continue;
        visited[i] = true;
        result.push(i);
        dfs(depth+1);
        result.pop()
        visited[i]= false;
    }
}
dfs(0);
console.log(answer)

조합은 위 깊이에서 나온 값보다 큰 값만 탐색하면 됨 (이러면 오름차순으로 결과 배열에 들어갈 것 내림차순으로 하고 싶으면 그냥 반대로)
if(temp[temp.length-1] > i ) continue;


function factorial(n){
    if (n === 0 ) return 1;
    else {
        return n * factorial(n-1);
    }
}

팩토리얼 코드


상황을 그래프로 표현해보기

특정 깊이가 되면 멈추기

중복 선택을 막기 위해 방문처리해야함


eval() 함수를 쓰면 문자열로 된 수식을 계산해줌 

ex) '3+2-4' 를 넣으면 1을 출력

이때 문자열 숫자끼리 더하면 붙여줌



dfs 내부의 반복문 구조 
: 길이는  트리의 가로 길이 만큼 , 반복문 문자는 그 가로 종류 , depth가 세로
이 문자를 임시 저장소에 push 하고 dfs 재귀 , 문자 pop
push로 그 depth에 값을 결정하고 밑으로 내려가는 것 한 사이클 끝나면 다시 pop
만약 중복이 허용되지 않는다면 방문했는지도 체크하고 true ,false 변환


dfs 내부 조건문 구조
: 언제 재귀를 끝낼지 결정 , 위에 임시 저장소에 저장된 값들을 꺼내서 출력


depth 가 n-1인 경우는 마지막에 남는 경우의 수가 1개일때 이때는 dfs를 1번 덜 돌림(시작이 0인지 1인지 잘 확인)
물론 마지막 부분에 대한 처리는 이 조건문에서 추가로 필요
최소값 구할때 초기 변수에는 엄청 큰 수 넣기 1e9


순열이나 조합같은 느낌으로 여러 경우의 수를 모두 계산해봐야할때 dfs

조합이면 if(result[result.length-1] > i) continue 코드 필요
중복 안되면 visited 배열 사용


각 깊이에서 계속 계산해서 비교해야 하면 depth >= k 이런식이고 조건문에 return 삭제
<- 조합에서 r부분(뒷숫자) 이 변하면 이렇게 해야 함

(상하좌우 모두 이동가능한 문제)

dfs(x,y) 이렇게 현재좌표에서 탐색을 하면 될듯 상하 좌우로


디버깅 하려면 함수를 console.log()로 찍기


이차원 배열에서 상하좌우 이동

let dx = [-1,1,0,0];
let dy = [0,0,-1,1];


for(let i = 0 ; i < 4; i++){
        let nx = x + dx[i];
        let ny = y + dy[i];

let [r, c] = input[0].split(' ').map(Number);
let arr = [];
for (let i = 1; i <= r; i++) {
    arr.push(input[i].trim().split(''))
}


let visited = new Set(); //지나온 칸에 있던 알파벳;
let maxDepth = 0; // 깊이가 곧 등장한 알파벳 개수

let dx = [-1,1,0,0];
let dy = [0,0,-1,1];

function dfs(depth,x,y){
    maxDepth = Math.max(maxDepth,depth); // 각 경로별 depth를 업데이트
    for(let i = 0 ; i < 4; i++){
        let nx = x + dx[i];
        let ny = y + dy[i];
        if( nx < 0 || nx >= r || ny < 0 || ny >= c)continue;
        if(visited.has(arr[nx][ny])) continue;
        visited.add(arr[nx][ny]);
        dfs(depth+1 , nx, ny);
        visited.delete(arr[nx][ny]);
    }
}
visited.add(arr[0][0]);
dfs(1,0,0);
console.log(maxDepth);
