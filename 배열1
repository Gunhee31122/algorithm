1.arr.push(): 하면 배열의 뒤에 추가 (여러 개 한 번에 추가 가능) / arr.pop() : 맨 뒤의 요소를 제거하고 반환,배열 자체가 바뀜
배열.concat(배열) 하면 배열 들을 연결해줌

2. arr.unshift() 배열의 앞에 추가 (여러 개 한번에 가능) / arr.shift() 앞에서부터 pop,배열 자체가 바뀜

3. arr.splice(2,1,999) 시작인자는 필수고 이 시작인자부터 제거할 개수만큼 제거 + 제거한 위치에 추가할 값도 지정 가능( 여러개 넣을 수도 있음)
추가 삭제 다 이걸로 가능 , 배열 자체가 바뀜

4. arr.includes("값") 하면 값이 배열에 있으면 true 없으면 false / arr.find(조건) 는 주어진 판별함수의 요건을 만족하는 첫 번째 값을 반환 없으면 undefined / 문자열에서도 사용 가능
ex> arr.find((number) => number > 3)

5. array.indexOf(''); 하면 특정 값의 인덱스를 알려줌 / lastIndexOf 하면 뒤에서부터의 인덱스 알려줌 -없으면 -1 반환  ( 여러개면 첫 번째 인덱스만 알려줌)
따라서 없을때까지라는 의미는 indexOf("") > -1 
- 문자열에서도 사용 가능 한 글자가 아니라 문장도 찾을 수 있음

6. 배열.join("구분자") 배열 요소들의 값을 이어서 출력
구분자를 안 넣으면 그냥 ,로 구분 / 구분자에 문자열도 가능 and 이런식으로 구분 가능

7. arr.reverse() - 배열의 순서를 뒤집어 반환(배열 자체도 바꿈)

8. 3. arr.slice(start,end) 특정 인덱스를 잘라서 새로운 배열을 만듬 시작,종료를 지정가능(하나만 지정도 가능) - splice는 원 배열을 바꾸기 때문에 이게 나을때가 있음
- 파이썬 처럼 end-1 됨

9. arr.fill("값") 원본 배열을 수정하며 지정한 값으로 채워줌 , 값 뒤에 시작 인덱스와 종료 인덱스를 지정할 수 있음

10. arr.filter(함수) 함수에 해당하는 값들만 남기는 새로운 배열 반환
let results = arr.filter(function(요소, index, array) {
});
- 조건을 만족하는 요소들만 새로운 배열로 반환

11. let users = [
{id: 1, name: "John"},
{id: 2, name: "Pete"},
{id: 3, name: "Mary"}
];
// 앞쪽 사용자 두 명을 반환합니다.
let someUsers = users.filter(item => item.id < 3);


12. some 메서드
map과 비슷한데 요소를 순환하면서 함수부분에 해당하는 조건을 만족하는 것이 하나라도 있으면 true반환

13. eveyr메서드
위와 반대로 모두 참일 때만 true반환

14. for ( const item of arr) {
console.log(item);
으로 배열을 순환
for in은 객체의 키와 배열의 인덱스를 반환

15. 배열.sort((a,b) => a-b)  // 오름차순/ 정렬 특정 값을 기준으로 정렬하고 싶으면 a,b대신  a.value - b.value 이런식 / 원배열이 바뀜

16. map() 
배열 내의 모든 요소에 대해 주어진 함수의 결과를 모은 새로운 배열반환

numbers.map(function(element,index,array) {return})
return 부분에 처리할 동작 넣음
한줄이면 function 자리에 () =>  이렇게 처리 가능

* 응용 : 클래스들로 이루어진 배열에서 클래스내 특정 프로퍼티만 뽑을수 있음


