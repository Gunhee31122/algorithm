class Queue {
    constructor() {
        this.items = [];
        this.headIndex = 0;
        this.tailIndex = 0;
    }
    enqueue(item) {
        this.items[this.tailIndex] = item; // tail자리에는 값이 비어있어야함
        this.tailIndex++
    }
    dequeue() {
        const item = this.items[this.headIndex];
        delete this.items[this.headIndex];
        this.headIndex++;
        return item;
    }
    peek() { // 다음 으로 꺼내려는 원소 스택의 top
        return this.items[this.headIndex];
    }
    getLength() {
        return this.tailIndex - this.headIndex;
    }
    getMax() {
        let max = -Infinity;
        for (let i = this.headIndex; i < this.tailIndex; i++) {
            if (this.items[i] > max) {
                max = this.items[i];
            }
        }
        return max;
    }
}
  
딕셔너리는 키와 밸류 형태로 이루어진 자료형으로  인덱스를 써서 배열과 비슷하게 사용가능

delete 객체[인덱스] 하면 특정 인덱스를 삭제할 수 있는데 이때 삭제 된부분이 사라지는게 아니라 undefined 로 남기 때문에 splice를 이용하는 것이 좀 더 깔끔할 수 있음
단 큐를 구현할때는 어차피 맨 앞 인덱스를 옮기기 때문에 큰 문제는 아님


(덱)
deque (덱)은 선입선출 후입선출이 모두 가능한 스택+큐의 구조


class Deque {
    constructor() {
        this.items = [];
    }
    addFront(item) {
        this.items.unshift(item);
    }
    addRear(item) {
        this.items.push(item);
    }
    removeFront() {
        if (this.isEmpty()) {
            return null;
        }
        return this.items.shift();
    }
    removeRear() {
        if (this.isEmpty()) {
            return null;
        }
        return this.items.pop();
    }
    peekFront() {
        if (this.isEmpty()) {
            return null;
        }
        return this.items[0];
    }
    peekRear() {
        if (this.isEmpty()) {
            return null;
        }
        return this.items[this.items.length - 1];
    }
    isEmpty() {
        return this.items.length === 0;
    }
    size() {
        return this.items.length;
    }
    toString() {
        return this.items.toString();
    }
    getMax() {
        if (this.isEmpty()) {
            return null;
        }
        return Math.max(...this.items);
    }
    getMin() {
        if (this.isEmpty()) {
            return null;
        }
        return Math.min(...this.items);
    }
    getIndex(value) {
        for (let i = 0; i < this.items.length; i++) {
            if (this.items[i] === value) {
                return i;
            }
        }
        return -1; // 값이 없는 경우 -1 반환
    }
}


let prices = Array.from({ length: 40 }, (_, index) => index); 0부터 40까지 숫자가 담긴 배열


인덱스와 값을 각각 큐에 저장하면 동시에 다룰 수 있음


큐에서 배열 자체를 쓰고 싶으면 queue.items를 써야함

큐에서 삭제를 할때 undefined처리가 되기 때문에 조심해야 함
